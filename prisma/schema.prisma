generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  name         String?
  passwordHash String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  orders       Order[]
}

model Product {
  id          String         @id @default(cuid())
  slug        String         @unique
  title       String
  subtitle    String?
  description String?
  status      ProductStatus  @default(DRAFT)
  category    String         @default("i-tags")
  brand       String?        @default("Hyperloq")
  images      ProductImage[]
  variants    Variant[]
  specs       Json?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  seoTitle    String?
  seoDesc     String?
}

model ProductImage {
  id        String  @id @default(cuid())
  productId String
  url       String
  alt       String?
  width     Int?
  height    Int?
  sort      Int     @default(0)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Variant {
  id             String  @id @default(cuid())
  productId      String
  sku            String  @unique
  title          String
  color          String?
  packSize       Int?
  priceCents     Int
  currency       String  @default("EUR")
  vatRate        Decimal @default(24.0)
  compareAtCents Int?
  weightGrams    Int?
  stockQty       Int     @default(0)
  isDefault      Boolean @default(false)
  product        Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  // Back-relations
  cartItems  CartItem[]  @relation("CartItemVariant")
  orderItems OrderItem[] @relation("OrderItemVariant")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id         String     @id @default(cuid())
  customerId String?
  items      CartItem[]
  currency   String     @default("EUR")
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  shippingName String?
  shippingPhone String?
  shippingAddr1 String?
  shippingAddr2 String?
  shippingCity String?
  shippingPost String?
  shippingCountry String?

}

model CartItem {
  id        String @id @default(cuid())
  cartId    String
  variantId String
  quantity  Int    @default(1)
  unitCents Int

  cart    Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  variant Variant @relation("CartItemVariant", fields: [variantId], references: [id])
}

model Order {
  id                    String        @id @default(cuid())
  customerId            String?
  email                 String
  status                OrderStatus   @default(PENDING)
  paymentStatus         PaymentStatus @default(UNPAID)
  currency              String        @default("EUR")
  subtotalCents         Int
  taxCents              Int
  shippingCents         Int
  totalCents            Int
  shippingName          String?
  shippingPhone         String?
  shippingAddr1         String?
  shippingAddr2         String?
  shippingCity          String?
  shippingPost          String?
  shippingCountry       String?       @default("GR")
  billingSameAsShipping Boolean       @default(true)
  lineItems             OrderItem[]
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  user                  User?         @relation(fields: [customerId], references: [id])
  stripeSessionId       String?
  stripePaymentIntentId String?
  refunds               Refund[]
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  variantId String
  title     String
  sku       String
  quantity  Int
  unitCents Int
  vatRate   Decimal

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  variant Variant @relation("OrderItemVariant", fields: [variantId], references: [id])
}

enum ProductStatus {
  DRAFT
  ACTIVE
  ARCHIVED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  FULFILLED
  CANCELLED
  REFUNDED
}

model ProcessedEvent {
  id        String   @id
  type      String
  createdAt DateTime @default(now())
}

model Refund {
  id             String   @id @default(cuid())
  orderId        String
  stripeRefundId String   @unique
  amountCents    Int
  reason         String?
  createdAt      DateTime @default(now())
  order          Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

enum PaymentStatus {
  UNPAID
  PAID
  REFUNDED
  PARTIALLY_REFUNDED
}

model Audit {
id String @id @default(cuid())
type String // e.g., "REFUND_REQUEST"
orderId String?
amountCents Int?
actorType String? // e.g., "ADMIN_API"
actorId String?
ip String?
userAgent String?
meta Json?
createdAt DateTime @default(now())
}