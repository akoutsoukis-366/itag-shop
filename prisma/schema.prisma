generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model Product {
  id           String         @id @default(cuid())
  slug         String         @unique
  title        String
  subtitle     String?
  description  String?
  status       ProductStatus  @default(DRAFT)
  category     String         @default("i-tags")
  brand        String?        @default("Hyperloq")

  // Existing structured specs for tech table
  specs        Json?

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  // Existing SEO fields
  seoTitle     String?
  seoDesc      String?

  // NEW — PDP content fields (safe, additive)
  images       String[]       @default([])     // hero/gallery URLs (order matters)
  highlights   String[]       @default([])     // bullet points near CTA
  badges       String[]       @default([])     // small trust/benefit labels
  faq          Json?                           // [{ q: string, a: string }]
  canonicalUrl String?                         // canonical tag for SEO

  ProductImage ProductImage[]
  variants     Variant[]

  @@map("products")
}

model Order {
  id                    String        @id @default(cuid())
  customerId            String?
  email                 String
  paymentStatus         PaymentStatus @default(UNPAID)
  currency              String        @default("EUR")
  subtotalCents         Int
  taxCents              Int
  shippingCents         Int
  totalCents            Int
  shippingName          String?
  shippingPhone         String?
  shippingAddr1         String?
  shippingAddr2         String?
  shippingCity          String?
  shippingPost          String?
  shippingCountry       String?       @default("GR")
  billingSameAsShipping Boolean       @default(true)
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  stripePaymentIntentId String?       @unique
  stripeSessionId       String        @unique
  carrier               String?
  trackingNumber        String?
  trackingUrl           String?
  status                String
  emailConfirmationSent Boolean       @default(false)
  User                  User?         @relation(fields: [customerId], references: [id])
  orderEvents           OrderEvent[]
  orderItems            OrderItem[]
  refunds               Refund[]
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  variantId String
  title     String
  sku       String
  quantity  Int
  unitCents Int
  vatRate   Decimal
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  Variant   Variant @relation(fields: [variantId], references: [id])
}

model OrderEvent {
  id        String   @id @default(cuid())
  orderId   String
  actor     String?
  type      String
  before    Json?
  after     Json?
  createdAt DateTime @default(now())
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Refund {
  id             String   @id @default(cuid())
  orderId        String
  stripeRefundId String   @unique
  amountCents    Int
  reason         String?
  createdAt      DateTime @default(now())
  order          Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Audit {
  id          String   @id
  type        String
  orderId     String?
  amountCents Int?
  actorType   String?
  actorId     String?
  ip          String?
  userAgent   String?
  meta        Json?
  createdAt   DateTime @default(now())
}

model Cart {
  id              String     @id
  customerId      String?
  currency        String     @default("EUR")
  createdAt       DateTime   @default(now())
  updatedAt       DateTime
  shippingAddr1   String?
  shippingAddr2   String?
  shippingCity    String?
  shippingCountry String?
  shippingName    String?
  shippingPhone   String?
  shippingPost    String?
  CartItem        CartItem[]
}

model CartItem {
  id        String  @id
  cartId    String
  variantId String
  quantity  Int     @default(1)
  unitCents Int
  Cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  Variant   Variant @relation(fields: [variantId], references: [id])
}

model ProcessedEvent {
  id        String   @id
  type      String
  createdAt DateTime @default(now())
}

model ProductImage {
  id        String  @id
  productId String
  url       String
  alt       String?
  width     Int?
  height    Int?
  sort      Int     @default(0)
  Product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Variant {
  id             String      @id
  productId      String
  sku            String      @unique
  title          String
  color          String?
  packSize       Int?
  priceCents     Int
  currency       String      @default("EUR")
  vatRate        Decimal     @default(24.0)
  compareAtCents Int?
  weightGrams    Int?
  stockQty       Int         @default(0)
  isDefault      Boolean     @default(false)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime

  // NEW — per-variant presentation
  media          String[]    @default([])     // optional images for this variant
  badge          String?                      // e.g., "Best value"
  attr           Json?                        // arbitrary attributes for UI

  CartItem       CartItem[]
  OrderItem      OrderItem[]
  Product        Product     @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("variants")
}

enum ProductStatus {
  DRAFT
  ACTIVE
  ARCHIVED
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
}

enum PaymentStatus {
  UNPAID
  PAID
  REFUNDED
  PARTIALLY_REFUNDED
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  name         String?
  passwordHash String
  role         UserRole @default(USER)   // NEW
  isActive     Boolean  @default(true)   // NEW
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  Order        Order[]
}
